name: CI pipeline for AlbumRate project

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'

  push:
    branches:
      - '*'

jobs:
  # Unit tests
  test_unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.10' }}
      
      - name: Install dependencies
        run: |
          cd services/album_service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run unit tests
        run: |
          cd services/album_service
          pytest tests/unit

  # Integration tests
  test_integration:
    runs-on: ubuntu-latest
    needs: test_unit
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.DB_USER }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.10' }}

      - name: Install dependencies
        run: |
          cd services/album_service
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
        run: |
          cd services/album_service
          pytest tests/integration

  # Uncomment this section for frontend tests if needed
  # test-frontend:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Install Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16'
  #
  #     - name: Install frontend dependencies
  #       run: |
  #         cd frontend
  #         npm install
  #
  #     - name: Run frontend tests
  #       run: |
  #         cd frontend
  #         npm test
